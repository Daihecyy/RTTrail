// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  PostLoginAccessTokenData,
  PostLoginAccessTokenResponse,
  PostLoginTestTokenData,
  PostLoginTestTokenResponse,
  PostLoginResetPasswordData,
  PostLoginResetPasswordResponse,
  PostLoginMigrateMailData,
  PostLoginMigrateMailResponse,
  GetLoginMigrateMailConfirmData,
  GetLoginMigrateMailConfirmResponse,
  PostLoginChangePasswordData,
  PostLoginChangePasswordResponse,
  PostLoginActivateData,
  PostLoginActivateResponse,
  PostLoginRecoverData,
  PostLoginRecoverResponse,
  GetInformationResponse,
  GetPrivacyResponse,
  GetTermsAndConditionsResponse,
  GetSupportResponse,
  GetSecurityTxtResponse,
  GetWellKnownSecurityTxtResponse,
  GetRobotsTxtResponse,
  GetStyleFileCssData,
  GetStyleFileCssResponse,
  GetFaviconIcoResponse,
  GetUsersMeResponse,
  PatchUsersMeData,
  PatchUsersMeResponse,
  PostUsersMeAskDeletionResponse,
  GetusersMeProfilePictureResponse,
  PostusersMeProfilePictureData,
  PostusersMeProfilePictureResponse,
  GetUsersData,
  GetUsersResponse,
  GetUsersCountResponse,
  GetUsersSearchData,
  GetUsersSearchResponse,
  GetUsersAccountTypesResponse,
  PostUsersRegisterData,
  PostUsersRegisterResponse,
  GetUsersUserIdData,
  GetUsersUserIdResponse,
  PatchUsersUserIdData,
  PatchUsersUserIdResponse,
  GetUsersUserIdProfilePictureData,
  GetUsersUserIdProfilePictureResponse,
} from "./types.gen"

export class AuthService {
  /**
   * Login For Access Token
   * Ask for a JWT access token using oauth password flow.
   *
   * *username* and *password* must be provided
   *
   * Note: the request body needs to use **form-data** and not json.
   * @param data The data for the request.
   * @param data.formData
   * @returns AccessToken Successful Response
   * @throws ApiError
   */
  public static postLoginAccessToken(
    data: PostLoginAccessTokenData,
  ): CancelablePromise<PostLoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/login/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Test Token
   * Test access token
   * @param data The data for the request.
   * @param data.accountType
   * @returns User Successful Response
   * @throws ApiError
   */
  public static postLoginTestToken(
    data: PostLoginTestTokenData = {},
  ): CancelablePromise<PostLoginTestTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/login/test-token",
      query: {
        account_type: data.accountType,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Reset Password
   * Reset the user password, using a **reset_token** provided by `/users/recover` endpoint.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Result Successful Response
   * @throws ApiError
   */
  public static postLoginResetPassword(
    data: PostLoginResetPasswordData,
  ): CancelablePromise<PostLoginResetPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/login/reset-password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Migrate Mail
   * This endpoint will send a confirmation code to the user's new email address. He will need to use this code to confirm the change with `/users/confirm-mail-migration` endpoint.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns void Successful Response
   * @throws ApiError
   */
  public static postLoginMigrateMail(
    data: PostLoginMigrateMailData,
  ): CancelablePromise<PostLoginMigrateMailResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/login/migrate-mail",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Migrate Mail Confirm
   * This endpoint will update the user new email address.
   * The user will need to use the confirmation code sent by the `/users/migrate-mail` endpoint.
   * @param data The data for the request.
   * @param data.token
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getLoginMigrateMailConfirm(
    data: GetLoginMigrateMailConfirmData,
  ): CancelablePromise<GetLoginMigrateMailConfirmResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/login/migrate-mail-confirm",
      query: {
        token: data.token,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Change Password
   * Change a user password.
   *
   * This endpoint will check the **old_password**, see also the `/users/reset-password` endpoint if the user forgot their password.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Result Successful Response
   * @throws ApiError
   */
  public static postLoginChangePassword(
    data: PostLoginChangePasswordData,
  ): CancelablePromise<PostLoginChangePasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/login/change-password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Activate User
   * Activate the previously created account.
   *
   * **token**: the activation token sent by email to the user
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Result Successful Response
   * @throws ApiError
   */
  public static postLoginActivate(
    data: PostLoginActivateData,
  ): CancelablePromise<PostLoginActivateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/login/activate",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Recover User
   * Allow a user to start a password reset process.
   *
   * If the provided **email** corresponds to an existing account, a password reset token will be sent.
   * Using this token, the password can be changed with `/users/reset-password` endpoint
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Result Successful Response
   * @throws ApiError
   */
  public static postLoginRecover(
    data: PostLoginRecoverData,
  ): CancelablePromise<PostLoginRecoverResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/login/recover",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class CoreService {
  /**
   * Read Information
   * Return information about rttrail. This endpoint can be used to check if the API is up.
   * @returns CoreInformation Successful Response
   * @throws ApiError
   */
  public static getInformation(): CancelablePromise<GetInformationResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/information",
    })
  }

  /**
   * Read Privacy
   * Return RTTrail privacy
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getPrivacy(): CancelablePromise<GetPrivacyResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/privacy",
    })
  }

  /**
   * Read Terms And Conditions
   * Return RTTrail terms and conditions pages
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getTermsAndConditions(): CancelablePromise<GetTermsAndConditionsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/terms-and-conditions",
    })
  }

  /**
   * Read Support
   * Return RTTrail terms and conditions pages
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getSupport(): CancelablePromise<GetSupportResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/support",
    })
  }

  /**
   * Read Security Txt
   * Return RTTrail security.txt file
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getSecurityTxt(): CancelablePromise<GetSecurityTxtResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/security.txt",
    })
  }

  /**
   * Read Wellknown Security Txt
   * Return RTTrail security.txt file
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getWellKnownSecurityTxt(): CancelablePromise<GetWellKnownSecurityTxtResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/.well-known/security.txt",
    })
  }

  /**
   * Read Robots Txt
   * Return RTTrail robots.txt file
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getRobotsTxt(): CancelablePromise<GetRobotsTxtResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/robots.txt",
    })
  }

  /**
   * Get Style File
   * Return a style file from the assets folder
   * @param data The data for the request.
   * @param data.file
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getStyleFileCss(
    data: GetStyleFileCssData,
  ): CancelablePromise<GetStyleFileCssResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/style/{file}.css",
      path: {
        file: data.file,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Favicon
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getFaviconIco(): CancelablePromise<GetFaviconIcoResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/favicon.ico",
    })
  }
}

export class MeService {
  /**
   * Read Current User
   * Return `User` representation of current user
   *
   * **The user must be authenticated to use this endpoint**
   * @returns User Successful Response
   * @throws ApiError
   */
  public static getUsersMe(): CancelablePromise<GetUsersMeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/users/me",
    })
  }

  /**
   * Update Current User
   * Update the current user, the request should contain a JSON with the fields to change (not necessarily all fields) and their new value
   *
   * **The user must be authenticated to use this endpoint**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns void Successful Response
   * @throws ApiError
   */
  public static patchUsersMe(
    data: PatchUsersMeData,
  ): CancelablePromise<PatchUsersMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/users/me",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Ask User Deletion
   * This endpoint will ask administrators to process to the user deletion.
   * This manual verification is needed to prevent data from being deleting for other users
   * @returns void Successful Response
   * @throws ApiError
   */
  public static postUsersMeAskDeletion(): CancelablePromise<PostUsersMeAskDeletionResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/users/me/ask-deletion",
    })
  }

  /**
   * Read Own Profile Picture
   * Get the profile picture of the authenticated user.
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getusersMeProfilePicture(): CancelablePromise<GetusersMeProfilePictureResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "users/me/profile-picture",
    })
  }

  /**
   * Create Current User Profile Picture
   * Upload a profile picture for the current user.
   *
   * **The user must be authenticated to use this endpoint**
   * @param data The data for the request.
   * @param data.formData
   * @returns Result Successful Response
   * @throws ApiError
   */
  public static postusersMeProfilePicture(
    data: PostusersMeProfilePictureData,
  ): CancelablePromise<PostusersMeProfilePictureResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "users/me/profile-picture",
      formData: data.formData,
      mediaType: "multipart/form-data",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UsersService {
  /**
   * Read Users
   * Return all users from database as a list of `UserSimple`
   *
   * **This endpoint is only usable by administrators**
   * @param data The data for the request.
   * @param data.accountTypes
   * @returns UserSimple Successful Response
   * @throws ApiError
   */
  public static getUsers(
    data: GetUsersData = {},
  ): CancelablePromise<GetUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/users",
      query: {
        accountTypes: data.accountTypes,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Count Users
   * Return the number of users in the database
   *
   * **This endpoint is only usable by administrators**
   * @returns number Successful Response
   * @throws ApiError
   */
  public static getUsersCount(): CancelablePromise<GetUsersCountResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/users/count",
    })
  }

  /**
   * Search Users
   * Search for a user using Jaro_Winkler distance algorithm.
   * The `query` will be compared against users name, firstname and nickname.
   * Assume that `query` is the beginning of a name, so we can capitalize words to improve results.
   *
   * **The user must be authenticated to use this endpoint**
   * @param data The data for the request.
   * @param data.query
   * @param data.includedAccountTypes
   * @param data.excludedAccountTypes
   * @param data.accountType
   * @returns UserSimple Successful Response
   * @throws ApiError
   */
  public static getUsersSearch(
    data: GetUsersSearchData,
  ): CancelablePromise<GetUsersSearchResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/users/search",
      query: {
        query: data.query,
        includedAccountTypes: data.includedAccountTypes,
        excludedAccountTypes: data.excludedAccountTypes,
        account_type: data.accountType,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Account Types
   * Return all account types hardcoded in the system
   * @returns AccountType Successful Response
   * @throws ApiError
   */
  public static getUsersAccountTypes(): CancelablePromise<GetUsersAccountTypesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/users/account-types",
    })
  }

  /**
   * User Register
   * Register a user
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Result Successful Response
   * @throws ApiError
   */
  public static postUsersRegister(
    data: PostUsersRegisterData,
  ): CancelablePromise<PostUsersRegisterResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/users/register",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User
   * Return `User` representation of user with id `user_id`
   *
   * **The user must be authenticated to use this endpoint**
   * @param data The data for the request.
   * @param data.userId
   * @returns User Successful Response
   * @throws ApiError
   */
  public static getUsersUserId(
    data: GetUsersUserIdData,
  ): CancelablePromise<GetUsersUserIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update User
   * Update an user, the request should contain a JSON with the fields to change (not necessarily all fields) and their new value
   *
   * **This endpoint is only usable by administrators**
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns void Successful Response
   * @throws ApiError
   */
  public static patchUsersUserId(
    data: PatchUsersUserIdData,
  ): CancelablePromise<PatchUsersUserIdResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User Profile Picture
   * Get the profile picture of an user.
   *
   * Unauthenticated users can use this endpoint (needed for some OIDC services)
   * @param data The data for the request.
   * @param data.userId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getUsersUserIdProfilePicture(
    data: GetUsersUserIdProfilePictureData,
  ): CancelablePromise<GetUsersUserIdProfilePictureResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/users/{user_id}/profile-picture",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}
